// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bet_fred.Data;

#nullable disable

namespace bet_fred.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250821130658_AddOcrSuggestions")]
    partial class AddOcrSuggestions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("bet_fred.Models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("BetRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BetRecordId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("bet_fred.Models.BetRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ClassificationConfidence")
                        .HasColumnType("REAL");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WriterClassification")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BetRecords");
                });

            modelBuilder.Entity("bet_fred.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("bet_fred.Models.OcrSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BetRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileHash")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<long?>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Method")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BetRecordId");

                    b.ToTable("OcrSuggestions");
                });

            modelBuilder.Entity("bet_fred.Models.ThresholdRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeWindowMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ThresholdRules");
                });

            modelBuilder.Entity("bet_fred.Models.Alert", b =>
                {
                    b.HasOne("bet_fred.Models.BetRecord", "BetRecord")
                        .WithMany()
                        .HasForeignKey("BetRecordId");

                    b.HasOne("bet_fred.Models.Customer", "Customer")
                        .WithMany("Alerts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("BetRecord");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("bet_fred.Models.BetRecord", b =>
                {
                    b.HasOne("bet_fred.Models.Customer", "Customer")
                        .WithMany("BetRecords")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("bet_fred.Models.OcrSuggestion", b =>
                {
                    b.HasOne("bet_fred.Models.BetRecord", "BetRecord")
                        .WithMany()
                        .HasForeignKey("BetRecordId");

                    b.Navigation("BetRecord");
                });

            modelBuilder.Entity("bet_fred.Models.Customer", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("BetRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
